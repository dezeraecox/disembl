/***************************************************************/
/*  ____  _     _____ __  __ ____  _        ____      ______   */
/* |  _ \(_)___| ____|  \/  | __ )| |      /___  )   (  __  )  */
/* | | | | / __|  _| | |\/| |  _ \| |         / /    | |  | |  */
/* | |_| | \__ \ |___| |  | | |_) | |___     / /_    | |__| |  */
/* |____/|_|___/_____|_|  |_|____/|_____|  /_____|(_)(______)  */
/* DisEMBL is Copyright (C) 2003                               */
/* Lars Juhl Jensen & Rune Linding - EMBL                      */
/*                                                             */
/* Modifications for v2.0+                                     */
/* Copyright (C) 2016 Shyam Saladi - Caltech                   */
/*                                                             */
/* Licensed under GPLv2                                        */
/***************************************************************/

#ifndef LIBDISEMBL_H
#define LIBDISEMBL_H

void predict_seq(char const *seq, float *sm_arr, float *sb_arr, float *sr_arr);

float const sigmoid[256] = {
  0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
  0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000001f, 0.000001f, 0.000001f, 0.000001f,
  0.000001f, 0.000001f, 0.000001f, 0.000001f, 0.000001f, 0.000002f, 0.000002f, 0.000002f,
  0.000002f, 0.000003f, 0.000003f, 0.000003f, 0.000004f, 0.000004f, 0.000005f, 0.000005f,
  0.000006f, 0.000007f, 0.000008f, 0.000009f, 0.000010f, 0.000011f, 0.000013f, 0.000015f,
  0.000017f, 0.000019f, 0.000021f, 0.000024f, 0.000028f, 0.000031f, 0.000035f, 0.000040f,
  0.000045f, 0.000051f, 0.000058f, 0.000066f, 0.000075f, 0.000085f, 0.000096f, 0.000109f,
  0.000123f, 0.000140f, 0.000158f, 0.000180f, 0.000203f, 0.000231f, 0.000261f, 0.000296f,
  0.000335f, 0.000380f, 0.000431f, 0.000488f, 0.000553f, 0.000626f, 0.000710f, 0.000804f,
  0.000911f, 0.001032f, 0.001170f, 0.001325f, 0.001501f, 0.001701f, 0.001927f, 0.002183f,
  0.002473f, 0.002801f, 0.003173f, 0.003594f, 0.004070f, 0.004610f, 0.005220f, 0.005911f,
  0.006693f, 0.007577f, 0.008577f, 0.009708f, 0.010987f, 0.012432f, 0.014064f, 0.015906f,
  0.017986f, 0.020332f, 0.022977f, 0.025957f, 0.029312f, 0.033086f, 0.037327f, 0.042088f,
  0.047426f, 0.053403f, 0.060087f, 0.067547f, 0.075858f, 0.085099f, 0.095349f, 0.106691f,
  0.119203f, 0.132964f, 0.148047f, 0.164516f, 0.182426f, 0.201813f, 0.222700f, 0.245085f,
  0.268941f, 0.294215f, 0.320821f, 0.348645f, 0.377541f, 0.407333f, 0.437823f, 0.468791f,
  0.500000f, 0.531209f, 0.562177f, 0.592667f, 0.622459f, 0.651355f, 0.679179f, 0.705785f,
  0.731059f, 0.754915f, 0.777300f, 0.798187f, 0.817574f, 0.835484f, 0.851953f, 0.867036f,
  0.880797f, 0.893309f, 0.904651f, 0.914901f, 0.924142f, 0.932453f, 0.939913f, 0.946597f,
  0.952574f, 0.957912f, 0.962673f, 0.966914f, 0.970688f, 0.974043f, 0.977023f, 0.979668f,
  0.982014f, 0.984094f, 0.985936f, 0.987568f, 0.989013f, 0.990292f, 0.991423f, 0.992423f,
  0.993307f, 0.994089f, 0.994780f, 0.995390f, 0.995930f, 0.996406f, 0.996827f, 0.997199f,
  0.997527f, 0.997817f, 0.998073f, 0.998299f, 0.998499f, 0.998675f, 0.998830f, 0.998968f,
  0.999089f, 0.999196f, 0.999290f, 0.999374f, 0.999447f, 0.999512f, 0.999569f, 0.999620f,
  0.999665f, 0.999704f, 0.999739f, 0.999769f, 0.999797f, 0.999820f, 0.999842f, 0.999860f,
  0.999877f, 0.999891f, 0.999904f, 0.999915f, 0.999925f, 0.999934f, 0.999942f, 0.999949f,
  0.999955f, 0.999960f, 0.999965f, 0.999969f, 0.999972f, 0.999976f, 0.999979f, 0.999981f,
  0.999983f, 0.999985f, 0.999987f, 0.999989f, 0.999990f, 0.999991f, 0.999992f, 0.999993f,
  0.999994f, 0.999995f, 0.999995f, 0.999996f, 0.999996f, 0.999997f, 0.999997f, 0.999997f,
  0.999998f, 0.999998f, 0.999998f, 0.999998f, 0.999999f, 0.999999f, 0.999999f, 0.999999f,
  0.999999f, 0.999999f, 0.999999f, 0.999999f, 0.999999f, 1.000000f, 1.000000f, 1.000000f,
  1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f
};

#endif
